#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;

uniform vec3 viewPos;
uniform sampler2D first_texture;

struct Light {
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  vec3 direction; // Spotlight direction
  float cutOff;   // Spotlight cutoff angle (cosine)
  float outerCutOff; // Spotlight outer cutoff angle (cosine)
};

#define MAX_POINT_LIGHTS 2
uniform Light lights[2];
uniform int numLights;

struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
};

uniform Material material;

vec3 CalcPointLight(Light light, vec3 norm, vec3 aPos, vec3 viewDir) {
  // ambient
  vec3 ambient = light.ambient * texture(first_texture, aTexCoord).rgb;

  // diffuse
  vec3 lightDir = normalize(light.position - aPos);
  float diff = max(dot(norm, lightDir), 0.0);
  vec3 diffuse = light.diffuse * diff  * texture(first_texture, aTexCoord).rgb;

  // specular
  vec3 reflectDir = reflect(-lightDir, norm);
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
  vec3 specular = light.specular * spec * vec3(texture(first_texture, aTexCoord));

  vec3 result = ambient + diffuse + specular;
  return result;
}

vec3 CalcSpotLight(Light light, vec3 normal, vec3 aPos, vec3 viewDir){
    vec3 lightDir = normalize(light.position - aPos);
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // spotlight intensity
    float theta = dot(lightDir, normalize(-light.direction));
    float epsilon = light.cutOff - light.outerCutOff;
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);
    // combine results
    vec3 ambient = light.ambient * material.ambient* intensity;
    vec3 diffuse = light.diffuse * (diff * material.diffuse*intensity);
    vec3 specular = light.specular * (spec * material.specular*intensity);


    return (ambient+ diffuse + specular);
}

void main() {
  vec3 norm = normalize(aNormal);
  vec3 viewDir = normalize(viewPos - aPos);

  vec3 result = vec3(0.0);
  result += CalcPointLight(lights[0], norm, aPos, viewDir);
  result += CalcSpotLight(lights[1], norm, aPos, viewDir);

  fragColor = vec4(result, 1.0);
}